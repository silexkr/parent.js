// Generated by CoffeeScript 1.4.0
(function() {
  var radioMap;

  radioMap = {};

  $.fn.extend({
    radioch: function() {
      var remove_check, _ref, _ref1;
      this.change(function() {
        var isChecked, name, val;
        name = $(this).attr("name");
        val = $(this).val();
        isChecked = $(this).is(":checked");
        if (isChecked) {
          radioMap[name] = true;
        }
        return $('.parent').each(function(e, el) {
          var $el, meta;
          $el = $(el);
          meta = $el.metadata({
            type: 'attr',
            name: 'data'
          });
          if (meta.name === name) {
            if (_.indexOf(meta.value, val) !== -1) {
              if (isChecked) {
                return $el.enable().show();
              } else if (radioMap[name]) {

              } else {
                return $el.disable().hide();
              }
            } else {
              if (isChecked) {
                return $el.disable().hide();
              }
            }
          }
        });
      }).change();
      if (((_ref = this.parent().get(0)) != null ? (_ref1 = _ref.tagName) != null ? _ref1.toLowerCase() : void 0 : void 0) === 'label') {
        this.parent().mouseenter(function() {
          if ($(this).find(':radio').is(':checked')) {
            return $(this).bind('click', remove_check);
          }
        });
        this.parent().mouseleave(function() {
          return $(this).unbind('click', remove_check);
        });
      }
      remove_check = function() {
        var $radio, name, val;
        console.log('remove_check');
        $radio = $(this).find(':radio');
        $radio.removeAttr('checked');
        name = $radio.attr('name');
        val = $radio.val();
        return $('.parent').each(function(e, el) {
          var $el, meta;
          $el = $(el);
          meta = $el.metadata({
            type: 'attr',
            name: 'data'
          });
          if (meta.name === name) {
            if (_.indexOf(meta.value, val) !== -1) {
              $el.disable().hide();
            }
          }
          if (!$("input[name=" + meta.name + "]").is(':visible')) {
            return $el.disable().hide();
          }
        });
      };
      return this;
    },
    checkboxch: function() {
      this.change(function() {
        var isChecked, name, val;
        name = $(this).attr("name");
        val = $(this).val();
        isChecked = $(this).is(":checked");
        return $('.parent').each(function(e, el) {
          var $el, meta;
          $el = $(el);
          meta = $el.metadata({
            type: 'attr',
            name: 'data'
          });
          if (meta.name === name) {
            if (_.indexOf(meta.value, val) !== -1) {
              if (isChecked) {
                return $el.enable().show();
              } else {
                return $el.disable().hide();
              }
            } else {
              if (isChecked) {
                return $el.disable().hide();
              }
            }
          }
        });
      }).change();
      return this;
    }
  });

  $(document).ready(function() {
    $(':radio').radioch();
    $(':checkbox').checkboxch();
    return $(':radio,:checkbox').on('change', function() {
      return $('.parent:visible').each(function(e, el) {
        var $el, meta;
        $el = $(el);
        meta = $el.metadata({
          type: 'attr',
          name: 'data'
        });
        if (!$("input[name=" + meta.name + "]").is(':visible')) {
          return $el.disable().hide();
        }
      });
    });
  });

}).call(this);
